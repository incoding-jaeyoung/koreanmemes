{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/damanegi/Desktop/dev/KoreanMemes/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { v2 as cloudinary } from 'cloudinary'\n\n// Cloudinary 설정\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('Environment check:', {\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME ? 'Set' : 'Missing',\n      api_key: process.env.CLOUDINARY_API_KEY ? 'Set' : 'Missing',\n      api_secret: process.env.CLOUDINARY_API_SECRET ? 'Set' : 'Missing',\n      openai_key: process.env.OPENAI_API_KEY ? 'Set' : 'Missing'\n    })\n\n    const formData = await request.formData()\n    const file = formData.get('image') as File\n    const translateImage = formData.get('translateImage') !== 'false'\n    const ocrOnly = formData.get('ocrOnly') === 'true' // OCR 전용 모드\n\n    if (!file) {\n      console.error('No file provided')\n      return NextResponse.json({ success: false, error: 'No file provided' })\n    }\n\n    console.log('File info:', {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      translateImage,\n      ocrOnly\n    })\n\n    const arrayBuffer = await file.arrayBuffer()\n    const buffer = Buffer.from(arrayBuffer)\n\n    // OCR 전용 모드: 번역된 텍스트만 반환\n    if (ocrOnly) {\n      console.log('OCR only mode - extracting and translating text')\n      \n      try {\n        // OCR만 수행하고 번역된 텍스트 반환\n        const translatedText = await extractAndTranslateText(buffer)\n        \n        if (!translatedText) {\n          console.log('No Korean text found in selection')\n          return NextResponse.json({ \n            success: false, \n            error: 'No Korean text found in the selected area' \n          })\n        }\n\n        console.log('OCR translation completed:', translatedText)\n        return NextResponse.json({ \n          success: true, \n          translatedText \n        })\n      } catch (error) {\n        console.error('OCR translation error:', error)\n        return NextResponse.json({ \n          success: false, \n          error: 'Failed to extract or translate text' \n        })\n      }\n    }\n\n    // 기존 이미지 업로드 로직\n    let processedBuffer: Buffer = buffer\n    \n    if (translateImage) {\n      console.log('Starting image translation...')\n      try {\n        const { translateImageText } = await import('@/lib/imageTranslator')\n        processedBuffer = await translateImageText(buffer) as Buffer\n        console.log('Image translation completed')\n      } catch (error) {\n        console.error('Image translation failed:', error)\n        console.log('Proceeding with original image due to translation failure')\n        processedBuffer = buffer\n      }\n    }\n\n    console.log('Starting Cloudinary upload...')\n    \n    const uploadResult = await new Promise<{ secure_url: string; public_id: string }>((resolve, reject) => {\n      cloudinary.uploader.upload_stream(\n        {\n          resource_type: \"image\",\n          folder: \"korean-memes\",\n          quality: \"auto\",\n          fetch_format: \"auto\"\n        },\n        (error, result) => {\n          if (error) {\n            console.error('Cloudinary upload error:', error)\n            reject(error)\n          } else if (result) {\n            console.log('Cloudinary upload success:', result.public_id)\n            resolve({ secure_url: result.secure_url, public_id: result.public_id })\n          } else {\n            reject(new Error('Upload failed - no result'))\n          }\n        }\n      ).end(processedBuffer)\n    })\n\n    return NextResponse.json({\n      success: true,\n      imageUrl: uploadResult.secure_url,\n      publicId: uploadResult.public_id\n    })\n\n  } catch (error) {\n    console.error('Upload API error:', error)\n    return NextResponse.json({ \n      success: false, \n      error: error instanceof Error ? error.message : 'Upload failed' \n    })\n  }\n}\n\n// OCR 및 번역 전용 함수 - OpenAI Vision API 사용\nasync function extractAndTranslateText(imageBuffer: Buffer): Promise<string | null> {\n  try {\n    const OpenAI = (await import('openai')).default\n\n    const openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    })\n\n    // 이미지를 base64로 변환\n    const base64Image = imageBuffer.toString('base64')\n    const mimeType = 'image/png' // 기본값으로 PNG 사용\n\n    console.log('Using OpenAI Vision API for OCR and translation...')\n\n    // OpenAI Vision API로 한 번에 OCR + 번역 수행\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert at reading Korean text from images and translating it to English. \n\nTASK:\n1. Extract any Korean text you see in the image\n2. If Korean text is found, translate it to English following these guidelines:\n   - Stay close to the literal meaning\n   - Preserve casual, humorous, or sarcastic tone\n   - Keep translations concise and punchy\n   - Use natural English expressions\n   - Maintain the original sentence structure when possible\n\nRESPONSE FORMAT:\n- If Korean text is found: return ONLY the English translation\n- If no Korean text is found: return \"NO_KOREAN_TEXT\"\n\nEXAMPLES:\nKorean: \"야, 니는 옷이다 어디 갔나?\" → \"Hey, where'd your clothes go?\"\nKorean: \"눈 개높음\" → \"Standards way too high\"\nKorean: \"저 다음 주 전역이라 다 나눠줬습니다\" → \"Getting discharged next week so I gave them all away\"`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Please extract and translate any Korean text you see in this image:\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:${mimeType};base64,${base64Image}`,\n                detail: \"high\"\n              }\n            }\n          ]\n        }\n      ],\n      max_tokens: 200,\n      temperature: 0.3,\n    })\n\n    const result = response.choices[0]?.message?.content?.trim()\n    console.log('Vision API result:', result)\n    \n    if (!result || result === \"NO_KOREAN_TEXT\") {\n      console.log('No Korean text detected by Vision API')\n      return null\n    }\n\n    return result\n  } catch (error) {\n    console.error('Vision API error:', error)\n    return null\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}