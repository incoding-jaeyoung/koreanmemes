{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/damanegi/Desktop/dev/KoreanMemes/src/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key'\n\ninterface JWTPayload {\n  email: string\n  role: string\n  exp: number\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.cookies.get('auth-token')?.value\n\n    if (!token) {\n      return NextResponse.json({\n        success: false,\n        message: '인증되지 않은 사용자입니다.'\n      }, { status: 401 })\n    }\n\n    // JWT 토큰 검증\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload\n\n    return NextResponse.json({\n      success: true,\n      user: {\n        email: decoded.email,\n        role: decoded.role\n      }\n    })\n\n  } catch (error) {\n    console.error('Auth verification error:', error)\n    return NextResponse.json({\n      success: false,\n      message: '인증 토큰이 유효하지 않습니다.'\n    }, { status: 401 })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAQtC,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;QAEjD,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,YAAY;QACZ,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,OAAO,QAAQ,KAAK;gBACpB,MAAM,QAAQ,IAAI;YACpB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}