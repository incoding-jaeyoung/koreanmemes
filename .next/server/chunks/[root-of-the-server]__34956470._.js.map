{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/damanegi/Desktop/dev/KoreanMemes/src/app/api/translate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport OpenAI from 'openai'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { text } = await request.json()\n\n    if (!text || !text.trim()) {\n      return NextResponse.json({ \n        success: false, \n        error: 'No text provided' \n      })\n    }\n\n    // 한글이 포함되어 있는지 확인\n    const koreanRegex = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/\n    if (!koreanRegex.test(text)) {\n      return NextResponse.json({ \n        success: false, \n        error: 'No Korean text detected' \n      })\n    }\n\n    // GPT로 번역\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a translator for Korean titles. Focus on literal translation while preserving the meaning and making it suitable for English-speaking audiences.\n\nGUIDELINES:\n• Translate Korean titles to clear, engaging English titles\n• Keep titles concise and punchy for social media/blog format\n• Preserve the original meaning and tone\n• Make it suitable for English-speaking audiences interested in Korean culture\n• Use natural English expressions\n• Avoid overly literal translations that sound awkward\n• Keep it under 80 characters when possible\n\nEXAMPLES:\nKorean: \"한국 직장 문화: 눈치의 신비로운 세계\"\nEnglish: \"Korean Office Culture: The Mystery of 'Nunchi' Explained\"\n\nKorean: \"김치찌개가 맛있는 이유\"\nEnglish: \"Why Kimchi Stew Hits Different\"\n\nKorean: \"한국 드라마 속 로맨스의 진실\"\nEnglish: \"The Truth About Romance in K-Dramas\"`\n        },\n        {\n          role: \"user\",\n          content: `Translate this Korean title to English: \"${text}\"`\n        }\n      ],\n      max_tokens: 100,\n      temperature: 0.3,\n    })\n\n    const translatedText = response.choices[0]?.message?.content?.trim()\n    \n    if (!translatedText) {\n      return NextResponse.json({ \n        success: false, \n        error: 'Translation failed' \n      })\n    }\n\n    // 따옴표 제거 (GPT가 가끔 따옴표로 감싸서 반환)\n    const cleanedText = translatedText.replace(/^[\"']|[\"']$/g, '')\n\n    return NextResponse.json({ \n      success: true, \n      translatedText: cleanedText \n    })\n\n  } catch (error) {\n    console.error('Translation API error:', error)\n    return NextResponse.json({ \n      success: false, \n      error: error instanceof Error ? error.message : 'Translation failed' \n    })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;AAEA,MAAM,SAAS,IAAI,wKAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEnC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT;QACF;QAEA,kBAAkB;QAClB,MAAM,cAAc;QACpB,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT;QACF;QAEA,UAAU;QACV,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS,CAAC;;;;;;;;;;;;;;;;;;;8CAmB0B,CAAC;gBACvC;gBACA;oBACE,MAAM;oBACN,SAAS,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;gBAC9D;aACD;YACD,YAAY;YACZ,aAAa;QACf;QAEA,MAAM,iBAAiB,SAAS,OAAO,CAAC,EAAE,EAAE,SAAS,SAAS;QAE9D,IAAI,CAAC,gBAAgB;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT;QACF;QAEA,+BAA+B;QAC/B,MAAM,cAAc,eAAe,OAAO,CAAC,gBAAgB;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,gBAAgB;QAClB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF","debugId":null}}]
}