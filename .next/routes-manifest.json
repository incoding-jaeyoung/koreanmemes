{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "origin-when-cross-origin"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    },
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, s-maxage=10, stale-while-revalidate=59"
        }
      ],
      "regex": "^/api(?:/(.*))(?:/)?$"
    },
    {
      "source": "/_next/static/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/_next/static(?:/(.*))(?:/)?$"
    }
  ],
  "dynamicRoutes": [
    {
      "page": "/api/posts/[id]",
      "regex": "^/api/posts/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/posts/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/posts/[id]/comments",
      "regex": "^/api/posts/([^/]+?)/comments(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/posts/(?<nxtPid>[^/]+?)/comments(?:/)?$"
    },
    {
      "page": "/api/posts/[id]/comments/[commentId]",
      "regex": "^/api/posts/([^/]+?)/comments/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPcommentId": "nxtPcommentId"
      },
      "namedRegex": "^/api/posts/(?<nxtPid>[^/]+?)/comments/(?<nxtPcommentId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/posts/[id]/view",
      "regex": "^/api/posts/([^/]+?)/view(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/posts/(?<nxtPid>[^/]+?)/view(?:/)?$"
    },
    {
      "page": "/edit/[id]",
      "regex": "^/edit/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/edit/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/post/[id]",
      "regex": "^/post/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/post/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/write",
      "regex": "^/write(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/write(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}